`%xml en;
`
` Language versions:
`
`   en - English (US)
`
` You must compile this Bark document with bark before you can view it
` as a valid HTML document.
`
` This Bark document and the HTML document it compiles to are under the
` license described in section C "Specification license" of this
` document.
`
`^{
<!DOCTYPE html>
<!-- Auto-generated by Bark -->
`en=<html lang="en">
  <head>
    <meta charset="utf-8"/>
`^}
`en=`#=    <title>Langtag specification</title>
`^{
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link href="SourceFonts.css" rel="stylesheet"/>
    <style>

body {
  max-width: 35em;
  padding-left: 0.25em;
  padding-right: 0.25em;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 3.5em;
  font-family: 'Source Serif', serif;
  background-color: WhiteSmoke;
  color: black;
}

:link {
  text-decoration: none;
  color: blue
}

:visited {
  text-decoration: none;
  color: blue
}

.tt {
  font-family: 'Source Code Pro', monospace;
  background-color: LightGray;
}

hr {
  margin-top: 2.5em;
}

#toc {
  background-color: white;
  padding: 0.5em;
  border: thin solid;
  margin-bottom: 1.5em;
  font-family: 'Source Sans 3', sans-serif;
}

#tochead {
  text-align: center;
  font-weight: bold;
  margin-bottom: 1em;
}

#toc ul {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 1.5em;
  padding-right: 1.5em;
}

h1 {
  font-family: 'Source Sans 3', sans-serif;
  margin-bottom: 0;
  text-align: center;
}

#verline {
  font-family: 'Source Sans 3', sans-serif;
  font-size: 150%;
  text-align: center;
}

h2 {
  font-family: 'Source Sans 3', sans-serif;
}

h3 {
  font-family: 'Source Sans 3', sans-serif;
}

h4 {
  font-family: 'Source Sans 3', sans-serif;
}

li {
  font-family: 'Source Sans 3', sans-serif;
}

#footline {
  font-size: smaller;
  text-align: right;
}

.iblock {
  font-family: 'Source Sans 3', sans-serif;
}

.explain {
  font-size: smaller;
}

.cblock {
  background-color: white;
  color: indigo;
  padding: 0.5em;
  font-family: 'Source Code Pro', monospace;
  border: thin dotted;
  overflow: auto;
}

.chead {
  text-decoration: underline;
  margin-top: 1em;
  margin-bottom: 1em;
}

.chead:first-child {
  margin-top: 0;
}

.ci {
  margin-left: 2em;
  margin-top: 1em;
}

#titlebox {
  background-color: white;
  margin-top: 3em;
  margin-bottom: 3em;
  padding-top: 0.5em;
  padding-bottom: 1.5em;
  border: medium double;
}

#gga table {
  border-collapse: collapse;
}

#gga th {
  border: thin solid;
  padding-left: 0.5em;
  padding-right: 0.5em;
  text-align: center;
  font-family: 'Source Sans 3', sans-serif;
}

#gga td {
  border: thin solid;
  padding-left: 0.5em;
  padding-right: 0.5em;
  text-align: left;
  font-family: 'Source Code Pro', monospace;
}

#ggb table {
  border-collapse: collapse;
}

#ggb th {
  border: thin solid;
  padding-left: 0.5em;
  padding-right: 0.5em;
  text-align: center;
  font-family: 'Source Sans 3', sans-serif;
}

#ggb td {
  border: thin solid;
  padding-left: 0.5em;
  padding-right: 0.5em;
  text-align: left;
  font-family: 'Source Code Pro', monospace;
  vertical-align: center;
}

#ggb .desc {
  font-family: 'Source Sans 3', sans-serif;
  vertical-align: center;
}

#ggc table {
  border-collapse: collapse;
}

#ggc th {
  border: thin solid;
  padding-left: 0.5em;
  padding-right: 0.5em;
  text-align: center;
  font-family: 'Source Sans 3', sans-serif;
}

#ggc td {
  border: thin solid;
  padding-left: 0.5em;
  padding-right: 0.5em;
  text-align: left;
  font-family: 'Source Code Pro', monospace;
}

#ggc .desc {
  font-family: 'Source Sans 3', sans-serif;
}

    </style>
  </head>
  <body>
`^}

<div id="titlebox">
`en=<h1>Langtag specification</h1>
`en=<div id="verline">Version 1.0</div>
</div>

<div id="toc">
`en=<div id="tochead">Table of Contents</div>
<ul>
`en=  <li>1. <a href="#sec1">Introduction</a></li>
`en=  <li>2. <a href="#sec2">Language tag format</a>
    <ul>
`en=      <li>2.1 <a href="#sec2p1">Grandfathered tags</a></li>
`en=      <li>2.2 <a href="#sec2p2">Language subtag</a></li>
    </ul>
  </li>
`en=  <li>3. <a href="#sec3">Language identification</a></li>
`en=  <li>9. <a href="#sec9">Language tag definition</a></li>
</ul>
<div>;_</div>
<ul>
`en=  <li>A. <a href="#secA">External references</a></li>
`en=  <li>B. <a href="#secB">Building the specification</a></li>
`en=  <li>C. <a href="#secC">Specification license</a></li>
</ul>
</div>

`en=<h2 id="sec1">1. Introduction</h2>

`en=<p>Langtag is a set of Python utilities for parsing language tag databases, listing useful information from those database, and generating data tables that can be used in software that handles language tags.</p>

`en=<p>The language tag format that Langtag uses is the standard language tagging format described in <a href="#extRFC5646">[RFC-;//5646]</a>.  This RFC is a complex standard that is based on externally managed databases.  The Langtag project provides Python utilities for parsing and deriving information from these externally managed databases that are necessary for properly handling language tags.</p>

`en=<h2 id="sec2">2. Language tag format</h2>

`en=<p>The format of a <i>language tag</i> is defined in <a href="#extRFC5646">[RFC-;//5646]</a>.  At the most basic level, a language tag is string of text that identifies the ;'(language;') used in certain media.  For example, the language tag <span class="tt">en-US</span> represents the English language as it is written in the United States.  Since ;'(language;') in this sense does not have a strict definition, the structure of a language tag can be surprisingly complex.</p>

`en=<p>The basic limitations on the format of a language tag are as follows:</p>

<blockquote class="iblock">
`en=<p>(1) Language tags are US-ASCII strings.</p>

`en=<p>(2) Language tags must be at least one character.  There is technically no upper limit on the length of a language tag, but RFC-5646 allows implementations to impose upper limits on the length of a language tag, and recommends in ;&S4.4.1 that implementations must allow for language tags of ;'(at least 35 characters.;')</p>

`en=<p>(3) Language tags are case insensitive.  However, normalized language tags are expected to follow certain conventions for capitalizing specific elements, which is described below.</p>

`en=<p>(4) Language tags are limited to only ASCII alphanumeric characters and the hyphen.  In practice, one often encounters underscores used in place of hyphens, but properly formatted tags should only use hyphens.</p>

`en=<p>(5) Neither the first nor last character of a language tag may be a hyphen, and no hyphen may immediately follow another hyphen.</p>
</blockquote>

`en=<p>Language tags can be thought of as a sequence of one or more <i>subtags.</i>  Subtags are always separated from each other with by hyphens.  To split a language tag into a sequence of subtags, simply split the string around the hyphen characters.  To form a language tag from a sequence of subtags, simply concatenate all the subtags together, with every subtag after the first preceded by a hyphen.  Subtags only contain alphanumeric characters, subtags are never empty, and hyphens are never used for any purpose except as a separator of subtags.</p>

`en=<p>To normalize the letter case within a language tag so that all letters follow the conventions, use the following procedure:</p>

<blockquote class="iblock">
`en=<p>(1) Convert all letters in the language tag to lowercase.</p>

`en=<p>(2) Subtags should be converted to use uppercase for all letters if the subtag is:</p>

<ul>
`en=<li>exactly two characters long</li>
`en=<li>not the first subtag</li>
`en=<li>not preceded by a subtag that has only one character</li>
</ul>

`en=<p>(3) Subtags should be converted to use an uppercase letter for the first character (if the first character is letter) and lowercase letters for all remaining characters that are letters if the subtag is:</p>

<ul>
`en=<li>exactly four characters long</li>
`en=<li>not the first subtag</li>
`en=<li>not preceded by a subtag that has only one character</li>
</ul>
</blockquote>

`en=<p>The algorithm given above will properly normalize the letter case for <b>all</b> language tags.  It matches the algorithm given in ;&S2.1.1 of RFC 5646.</p>

`en=<p>The following subsections define the format of language tags in greater detail.</p>

`en=<h3 id="sec2p1">2.1 Grandfathered tags</h3>

`en=<p>A <i>grandfathered tag</i> is an exceptional kind of language tag that does not obey all the rules.  Grandfathered tags arose from earlier language tag standards and are included in the current standard for sake of backwards compatibility.  The set of grandfathered tags is closed and frozen, such that no additional grandfathered tags will ever be added to the standard.</p>

`en=<p>All grandfathered tags follow the basic string format and letter casing conventions established in ;&S2 <a href="#sec2">Language tag format</a>.  However, grandfathered tags do <b>not</b> necessarily follow any of the additional formatting rules given in the subsections that follow this subsection.</p>

`en=<p>Most grandfathered tags are archaic and should be replaced during normalization by their modern, non-;//grandfathered equivalent.  This common kind of grandfathered tag is called GG1 in this specification.  The following table gives all GG1 tags and for each grandfathered tag shows the modern, non-;//grandfathered equivalent they should be replaced by during normalization:</p>

<blockquote id="gga">
<table>
  <tr>
    <th>GG1</th>
`en=    <th>Normalized</th>
  </tr>
  <tr><td>art-lojban</td><td>jbo</td></tr>
  <tr><td>en-GB-oed</td><td>en-GB-oxendict</td></tr>
  <tr><td>i-ami</td><td>ami</td></tr>
  <tr><td>i-bnn</td><td>bnn</td></tr>
  <tr><td>i-hak</td><td>hak</td></tr>
  <tr><td>i-klingon</td><td>tlh</td></tr>
  <tr><td>i-lux</td><td>lb</td></tr>
  <tr><td>i-navajo</td><td>nv</td></tr>
  <tr><td>i-pwn</td><td>pwn</td></tr>
  <tr><td>i-tao</td><td>tao</td></tr>
  <tr><td>i-tay</td><td>tay</td></tr>
  <tr><td>i-tsu</td><td>tsu</td></tr>
  <tr><td>no-bok</td><td>nb</td></tr>
  <tr><td>no-nyn</td><td>nn</td></tr>
  <tr><td>sgn-BE-FR</td><td>sfb</td></tr>
  <tr><td>sgn-BE-NL</td><td>vgt</td></tr>
  <tr><td>sgn-CH-DE</td><td>sgg</td></tr>
  <tr><td>zh-guoyu</td><td>cmn</td></tr>
  <tr><td>zh-hakka</td><td>hak</td></tr>
  <tr><td>zh-min-nan</td><td>nan</td></tr>
  <tr><td>zh-xiang</td><td>hsn</td></tr>
</table>
</blockquote>

`en=<p>There are also two grandfathered tags that have multiple possibilities for which modern tag they map to.  Since there is no easy way to determine which modern tag is appropriate, these two grandfathered tags should be left as-is during normalization.  The table below shows these two tags ;-m which are called the GG2 tags in this specification ;-m along with the set of modern tags they can map to, and a textual description for the archaic tag:</p>

<blockquote id="ggb">
<table>
  <tr>
    <th>GG2</th>
`en=    <th>Modern</th>
`en=    <th>Description</th>
  </tr>

  <tr><td rowspan="3">cel-gaulish</td><td>xcg</td><td rowspan="3" class="desc">Gaulish</td></tr>
  <tr><td>xga</td></tr>
  <tr><td>xtg</td></tr>

  <tr><td rowspan="5">zh-min</td><td>cdo</td><td rowspan="5" class="desc">Min, Fuzhou, Hokkien,<br/>Amoy, or Taiwanese</td></tr>
  <tr><td>cpx</td></tr>
  <tr><td>czo</td></tr>
  <tr><td>mnp</td></tr>
  <tr><td>nan</td></tr>
  
</table>
</blockquote>

`en=<p>Both of the GG2 tags look like they might follow the format of modern language tags, but this is an illusion.</p>

`en=<p>For <span class="tt">cel-;//gaulish</span> the <span class="tt">cel</span> language name is a proper language tag referring to the Celtic language group.  The <span class="tt">gaulish</span> suffix appears to be a variant tag;; however, no variant tag <span class="tt">gaulish</span> exists in the subtag registry, so it is not actually a proper variant tag.</p>

`en=<p>For <span class="tt">zh-;//min</span> the <span class="tt">zh</span> language name is a proper language tag referring to the Chinese macrolanguage.  The <span class="tt">min</span> suffix appears to be an extlang tag, which would make one think this language tag could be normalized to <span class="tt">min</span>.  However, the <span class="tt">min</span> language tag refers to the Minangkabau language, so the <span class="tt">min</span> suffix in <span class="tt">zh-;//min</span> can <b>not</b> be treated as an extlang.</p>

`en=<p>In short, it is important that GG2 are <b>not</b> parsed like normal tags.  New applications should avoid using the GG2 tags, and use the proper modern equivalents instead.  However, legacy data that includes these GG2 tags should leave the GG2 tags alone during normalization and be careful to treat them as special grandfathered tags rather than misinterpreting them as though they were modern tags.</p>

`en=<p>Finally, there are three completely irregular grandfathered tags, which do not have any modern equivalent tags and do not follow the modern tag format (except for the basic string format and casing conventions in ;&S2).  These three completely irregular grandfathered tags are called GG3 in this specification.  The following table gives each of the three GG3 tags and a textual description:</p>

<blockquote id="ggc">
<table>
  <tr>
    <th>GG3</th>
`en=    <th>Description</th>
  </tr>
  <tr><td>i-default</td><td class="desc">Default Language</td></tr>
  <tr><td>i-enochian</td><td class="desc">Enochian</td></tr>
  <tr><td>i-mingo</td><td class="desc">Mingo</td></tr>
</table>
</blockquote>

`en=<p>As with GG2 tags, the GG3 tags should be left alone during normalization and treated as exceptions.  Modern applications should avoid using the GG3 tags, but legacy data based on earlier standards may include them.</p>

`en=<h3 id="sec2p2">2.2 Language subtag</h3>

`en=<p>The <i>language subtag</i> is the first element in a language tag, which identifies the main language.  All language tags can be parsed into two components ;-m the language subtag followed by an <i>elaboration,</i> which is a sequence of one or more additional subtags that adds additional information to the language tag.  This subsection explains how to parse a language tag into a language subtag and an elaboration, as well as the meaning of the language subtag.  Further subsections will explain the meaning of subtags in the elaboration.</p>

`en=<p>Before attempting to parse a language tag into the language subtag and the elaboration, first perform a basic normalization of the language tag string by trimming leading and trailing whitespace (if appropriate), replacing underscores by hyphens, verifying the basic string format established in ;&S2 <a href="#sec2">Language tag format</a>, and normalizing letter case according to the algorithm in ;&S2.</p>

`en=<p>After this basic verification and normalization step, check whether the language tag matches any of the GG1 <a href="#sec2p1">grandfathered tags</a> (;&S2.1).  If it does match a GG1 tag, replace it with its normalized equivalent before proceeding.</p>

`en=<p>The next basic normalization step is to remap redundant sign languages<sup><a href="#ft2p2n1">[;&!1]</a></sup>.  To do this, use all records with type ;'(redundant;') in the <a href="#extSubtag">[SUBTAG]</a> database whose first subtag is <span class="tt">sgn</span> and that have a <span class="tt">Preferred-;//Value</span> field.  All these records should have exactly two subtags in their tag field.  If the language tag also has exactly two subtags that match one of these redundant records, then replace the language tag with the value of the <span class="tt">Preferred-;//Value</span> field.</p>

<blockquote class="explain" id="ft2p2n1">
`en=[;&!1] ;-m The redundant records are a closed, frozen set of records that will not be expanded in the future.  The only remappings defined by these records are the sign language mappings that are handled above and a few remappings involving the Chinese macrolanguage.  However, the Chinese macrolanguage remappings truly are redundant and are handled by extlang promotion described in the next step, so there is no need to handle these as special cases.
</blockquote>

`en=<p>The final basic normalization step is to promote any extlangs.  An <i>extlang</i> is present if all the following conditions are satisfied:</p>

<ol>
`en=<li>The language tag has at least two subtags</li>
`en=<li>The first subtag is two or three letters</li>
`en=<li>The second subtag is three letters<sup><a href="#ft2p2n2">[;&!2]</a></sup></li>
</ol>

`en=<p>If all the above conditions are satisfied, then an extlang is present and it needs to be promoted to the main language<sup><a href="#ft2p2n3">[;&!3]</a></sup>.  To do this, simply drop the first subtag, so that second subtag becomes the first subtag.</p>

<blockquote class="explain">
`en=<p id="ft2p2n2">[;&!2] ;-m The RFC syntax allows for multiple extlang subtags to appear in a single language tag.  However, the RFC indicates that this syntax is ;'(permanently reserved;') and it does not ever appear to be used in practice.  Therefore, this theoretical case is ignored here.</p>
`en=<p id="ft2p2n3">[;&!3] ;-m The extlang is sometimes used for handling macrolanguages.  In this case, the first subtag is the macrolanguage and the second subtag (the extlang) is the language within that macrolanguage.  All extlang tags have an equivalent language tag that has exactly the same code, so extlangs can always be promoted to the main language subtag simply by dropping the macrolanguage subtag.</p>
</blockquote>

`en=<p>The first special case to consider after the initial normalization steps is whether the whole language tag matches one of the five GG2 and GG3 grandfathered tags.  If it does, then the language subtag is equal to the exceptional GG2 or GG3 tag, and the elaboration is empty.</p>

`en=<p>The second special case to consider is whether the first subtag is the single letter <span class="tt">x</span>.  If it is, then the language subtag is empty (the only case in which it can be empty) and the elaboration is equal to the whole language tag.</p>

`en=<p>After the basic normalization and validation steps as well as the special cases that have just been described are handled, we are left with the general case.  The general case is that the language subtag is the first subtag and the elaboration is everything after the first subtag, except for the first hyphen in the string (if present).  In the general case, the language subtag must either be two or three letters<sup><a href="#ft2p2n4">[;&!4]</a></sup> and it must have a matching record of ;'(language;') type in the <a href="#extSubtag">[SUBTAG]</a> database.</p>

<blockquote class="explain" id="ft2p2n4">
`en=[;&!4] ;-m The RFC also allows for language tags of four to eight letters, but reserves them for future use.  Such tags appear to be a carryover from an earlier standard and have no practical use, so they are ignored here.  
</blockquote>

`en=<p>In the general case, it is also necessary to check whether the language record in the subtag database has a <span class="tt">Preferred-;//Value</span> field.  If it does, the language tag must be normalized to its preferred value.  This additional normalization is <i>not</i> required for the two special cases listed earlier.</p>

`en=<p>The result of the processes described in this subsection is that the language tag is parsed into a language subtag and an elaboration, where the elaboration is a sequence of zero or more additional subtags (the meaning of which is described in subsequent subsections).  The languge subtag will have one of the following formats:</p>

<ol>
`en=<li>Empty string;; elaboration always begins with <span class="tt">x-</span> in this case</li>
`en=<li>GG2 or GG3 <a href="#sec2p1">grandfathered tag</a> (;&S2.1);; elaboration always empty in this case</li>
`en=<li>Two-letter language code, all lowercase</li>
`en=<li>Three-letter language code, all lowercase</li>
</ol>

`en=<p>For information about how to interpret a language subtag, see ;&S3 <a href="#sec3">Language identification</a>.</p>

`en=<h2 id="sec3">3. Language identification</h2>

`en=<h2 id="sec9">9. Language tag definition</h2>

`en=<p>A <i>language tag</i> is a standard US-;//ASCII textual code that identifies the ;'(language;') used in certain media.  For example, the language tag <span class="tt">en-US</span> identifies the English language as it is used in the United States.  Since ;'(language;') in this sense does not have a strict definition, the structure of a language tag can be surprisingly complex.</p>

`en=<p>Jacques-Types limits itself to three functions for working with language tags:</p>

<ol>
`en=<li>Normalizing language tags</li>
`en=<li>Checking whether a language tag has the proper format</li>
`en=<li>If possible, mapping a normalized language tag to a non-;//unique English-;//language description of the language, but not necessarily including all information present in the language tag</li>
</ol>

`en=<p>The first two functions should work in all applications that use standard language tags.  The third function, however, is only sufficient for applications that want to display a user-friendly gloss of a language tag.  Sophisticated multilingual applications will likely need to supply their own methods for displaying language tags to the user in an unambiguous manner.  For example, Jacques-;//Types will describe both language tags <span class="tt">es-419</span> and <span class="tt">es-ES</span> as <i>Spanish</i> but a more sophisticated multilingual application may want to use the region information in the language tags to identify <span class="tt">es-419</span> as <i>Spanish (Latin America)</i> and <span class="tt">es-ES</span> as <i>Castilian (Spain)</i>.</p>

`en=<p>The normalization and format-;//checking functions are based on the standard language tag format defined in <a href="#extRFC5646">[RFC-;//5646]</a>.  This RFC specifies the format of language tags, but it does not actually define how language tag elements map to actual languages.</p>

`en=<p>The most basic standard defining the mapping of language tag elements to languages is <a href="#extISO6392">[ISO-;//639-;//2]</a>.  This standard defines a mapping of two-;//letter and three-;//letter codes to language names.  This standard was extended by <a href="#extISO6393">[ISO-;//639-;//3]</a>.  ISO-;//639-;//3 is a superset of ISO-;//639-;//2, except that certain codes in ISO-;//639-;//2 that refer to language families and groups of languages instead of individual languages are not included.  Jacques-;//Types uses the codes in ISO-;//639-;//3, and does not concern itself with the additional language group codes in ISO-;//639-;//2 since those are out of scope of what Jacques-;//Types does with language codes.</p>

`en=<p>The format in RFC-5646 also includes ;'(grandfathered;') language tags.  This is a closed set of exceptional language tags that were registered in a previous version of the language-;//tagging system.  RFC-5646 defines the set of grandfathered language tags but does not define their meaning.  The meaning of these grandfathered tags is defined in the <a href="#extSubtag">[SUBTAG]</a> dataset.  All the grandfathered tags are defined below, with the meanings based on the information from <a href="extSubtag">[SUBTAG]</a>.  Since the grandfathered set of language tags is a closed set, there shouldn;''t be any future changes to this set.</p>

`en=<p>The grandfathered language tags fall into three groups.  The first group of grandfathered language tags ;-m called GG1 here ;-m are simply archaic language tags that map to a specific modern language tag that is not grandfathered.  During the Jacques-;//Types normalization process, all grandfathered language tags in this first group will be replaced with their modern equivalents, and grandfathered language tags in this first group will not validate because they are not normalized.  The following table gives all the grandfathered tags in this group as well as the normalized tags they map to:</p>

`en=<p>The second group of grandfathered language tags ;-m called GG2 here ;-m are archaic language tags that have multiple possibilities for which modern tag they map to.  Since there is no easy way to determine which modern tag is appropriate, Jacques-;//Types does <i>not</i> map GG2 tags to modern forms.  The table below gives all the GG2 tags, the set of modern tags they can map to, and a textual description name for the archaic tag, since the archaic tag may not be found in modern data tables:</p>

`en=<p>The third and final group of grandfathered language tags ;-m called GG3 here ;-m are archaic language tags that have no modern tag equivalent.  Jacques-;//Types does <i>not</i> map GG3 tags to modern forms, since there are no modern forms to map to.  The table below gives all the GG3 tags and a textual description for the archaic tag, since the archaic tag may not be found in modern data tables:</p>

`en=<p>Note that the vast majority of grandfathered language tags are in the GG1 group, which is normalized to modern tags.  The only grandfathered tags that can be present in normalized language tags are the five tags found in the GG2 and GG3 groups.</p>

`en=<p>To normalize a language tag, use the following function:</p>

<blockquote class="cblock">
`#L:
JCQTypes::<b>normLang</b>(<br/>
  $str : string | mixed<br/>
) : string
`$
</blockquote>

`en=<p><b>Important:</b> the normalization function given here does <i>not</i> implement the ;'(Canonicalization of Language Tags;') described in ;&S4.5 of <a href="#extRFC5646">[RFC-;//5646]</a>.  Clients that have more sophisticated needs and require this additional level of normalization must provide for this functionality themselves.</p>

`en=<p>If something other than a string is passed, the effect is the same as passing an empty string.  The return string is <i>not</i> guaranteed to be a valid language tag.</p>

`en=<p>The first step in normalization is to trim leading and trailing whitespace, and then to convert all underscores to hyphens.</p>

`en=<p>The second step in normalization is to convert all uppercase letters to lowercase.</p>

`en=<p>The third step in normalization is to look for the first <i>singleton</i> in the language tag.  A <i>singleton</i> is a lowercase letter or a decimal digit that is neither preceded nor followed by another ASCII lowercase letter or decimal digit.  Singletons may occur at the start of the string and at the end of the string, and the entire string may be a singleton if there is only one character.  It is also possible that there is no singleton in the whole string.</p>

`en=<p>The fourth step is to define the <i>prefix</i> as everything up to <i>but excluding</i> the first singleton if there is at least one singleton in the string, or otherwise to define the prefix as the entire string.</p>

`en=<p>The fifth step is to locate all <i>doubles</i> in the prefix defined in the previous step.  A double is a sequence of two lowercase ASCII letters that is preceded by a hyphen and <i>not</i> followed by an ASCII letter.  Each double that is found in the prefix is converted to uppercase.</p>

`en=<p>The sixth step is to locate all <i>quads</i> in the prefix defined in the fourth step.  A quad is a sequence of four lowercase ASCII letters that is preceded by a hyphen and <i>not</i> followed by an ASCII letter.  Each quad that is found in the prefix has <i>its first letter only</i> converted to uppercase.</p>

`en=<p>The seventh and final step is to compare the result of the previous steps to the GG1 table given earlier in this section to see if the result is one of the grandfathered tags in the first group.  If it is, then replace the whole string with the special normalized form given in the earlier table.  Otherwise, leave the result as-is.  The grandfathered tags in the second and third groups (GG2 and GG3) are <i>not</i> modified in this step.</p>

`en=<p>To validate a normalized language tag, use the following function:</p>

<blockquote class="cblock">
`#L:
JCQTypes::<b>checkLang</b>(<br/>
  $str : string | mixed<br/>
) : boolean
`$
</blockquote>

`en=<p>You should normalize the language tag first with <span class="tt">norm;//Lang()</span> or the non-;//normalized text may fail validation.</p>

`en=<p>Passing a non-string parameter always causes the function to return <span class="tt">false</span>.  The function returns a boolean value that is <span class="tt">true</span> if the language tag is normalized and valid in format and <span class="tt">false</span> otherwise.</p>

`en=<p>The first validation step is to check whether the string is a case-;//sensitive match for any of the grandfathered tags in GG2 or GG3 (shown in tables earlier in this section).  If the given string is such an exact match for a GG2 or GG3 grandfather tag, then <span class="tt">true</span> is returned and the rest of the validation is skipped.  Note that GG1 grandfather tags do <i>not</i> get this special handling, since they should have been normalized to their modern equivalent.</p>

`en=<p>The second validation step is to check that the string has at least one character and at most 255 characters.  RFC 5646 allows for unlimited-;//length language tags, but it allows in ;&S4.4.1 ;'(Working with Limited Buffer Sizes;') that applications may impose an upper limit.  The limit of 255 characters enforced by Jacques-;//Types is far beyond the limit of 35 characters suggested in the RFC.</p>

`en=<p>The third validation step is to check that each character is either an ASCII alphanumeric character or a hyphen.  No other characters are allowed in normalized language tags.</p>

`en=<p>The fourth validation step is to check that neither the first nor the last character is a hyphen, and that no hyphen is immediately preceded by another hyphen.</p>

`en=<p>The fifth validation step is to check that the language tag begins with one of the following:</p>

<ol>
`en=<li>The two-character marker <span class="tt">x-</span></li>
`en=<li>Two lowercase letters followed by end of string</li>
`en=<li>Two lowercase letters followed by a hyphen</li>
`en=<li>Three lowercase letters followed by end of string</li>
`en=<li>Three lowercase letters followed by hyphen</li>
`en=<li>Four to eight lowercase letters followed by end of string</li>
`en=<li>Four to eight lowercase letters followed by hyphen</li>
</ol>

`en=<p>If the string begins with anything else, validation fails.  (However, note that the grandfathered tags in GG2 and GG3 pass validation as an exception due to step one.)</li>

`en=<p>The sixth validation step is to drop everything up to <i>but excluding</i> the first hyphen, or to drop all the characters in the string if there are no hyphens.  However, if the string began with the marker <span class="tt">x-</span> then add a hyphen prefix as an exception to this rule.  When data is dropped, remember how many letters were dropped from the start of the string.</p>

<p>... @@TODO: move all functions to separate language module so database can be used, and during normalization and validation make sure three-letter language codes replaced by two-letter language codes if possible;; will require new language database format that first has replacement table and then has mapping table from normalized language code to name</p>

<hr/>

`en=<h2 id="secA">A. External references</h2>

`en=<p id="extBark">[BARK] ;-m Bark project<br/>
Canidtech<br/>
<a href="https://www.purl.org/canidtech/r/bark">https://www.purl.org/canidtech/r/bark</a></p>

`en=<p id="extISO6392">[ISO-639-2] ;-m ;'(ISO-639-2 Registration Authority;')<br/>
Library of Congress Network Development & MARC Standards Office<br/>
<a href="https://www.loc.gov/standards/iso639-2/">https://www.loc.gov/standards/iso639-2/</a></p>

`en=<p id="extISO6393">[ISO-639-3] ;-m ;'(ISO 639-3 Registration Authority;')<br/>
SIL International<br/>
<a href="https://iso639-3.sil.org/">https://iso639-3.sil.org/</a></p>

`en=<p id="extISO6392">[ISO-639-5] ;-m ;'(ISO-639-5 Registration Authority;')<br/>
Library of Congress Network Development & MARC Standards Office<br/>
<a href="https://www.loc.gov/standards/iso639-5/">https://www.loc.gov/standards/iso639-5/</a></p>

`en=<p id="extRFC5646">[RFC-5646] ;-m ;'(Tags for Identifying Languages;')<br/>
A component RFC of BCP 47<br/>
IETF<br/>
<a href="https://tools.ietf.org/html/rfc5646">https://tools.ietf.org/html/rfc5646</a></p>

`en=<p id="extSubtag">[SUBTAG] ;-m ;'(Language Subtag Registry;')<br/>
Internet Assigned Numbers Authority (IANA)<br/>
<a href="https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry">https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry</a></p>

`en=<h2 id="secB">B. Building the specification</h2>

`en=<p>The HTML source code of this specification is auto-generated by <a href="#extBark">[BARK]</a> from the <a href="langtag.html.bark">langtag.html.bark</a> source file.  Changes should be made to the Bark source file, which should then be recompiled with Bark, instead of directly modifying the HTML code.</p>

`en=<p>The webfonts used to render this specification are included in the <span class="tt">fonts</span> subdirectory.  Please see the <a href="fonts/README.txt">README</a> file in that subdirectory for further information about the webfonts and their licenses.</p>

`en=<h2 id="secC">C. Specification license</h2>

`^{
` The following code was originally auto-generated from
` creativecommons.org, but it has been manually modified to clean up the
` HTML source code so that it validates correctly:
<div>
<a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />Langtag Specification by Multimedia Data Technology Inc is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.<br />Permissions beyond the scope of this license may be available at <a href="https://www.canidtech.com/">https://www.canidtech.com/</a>.
</div>
`^}

`#L:
<hr/>
<div id="footline">
Multimedia Data Technology, Inc.<br/>
<a href="https://www.canidtech.com/">www.canidtech.com</a><br/>
<br/>
`en=Written by Noah Johnson<br/>
<span class="tt">noah.johnson@loupmail.com</span><br/>
<br/>
`en=April 2021
</div>
`$

  </body>
</html>
